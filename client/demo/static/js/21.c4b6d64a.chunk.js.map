{"version":3,"sources":["helper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","demo/DemoControls.js","demo/mockDatabase.js","demo/mockApi.js"],"names":["findReservation","reservations","date","courtId","r","isSame","parseQuery","queryString","query","pairs","substr","split","i","length","pair","decodeURIComponent","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","demoControl","DemoControls","useContext","authContext","user","setUser","useState","open","setOpen","useApi","postLoginApi","login","history","useHistory","location","useLocation","useEffect","notification","info","style","zIndex","key","message","duration","placement","onClose","description","direction","pathname","size","onClick","push","userId","type","mail","password","close","position","bottom","right","today","dayjs","startOf","db","config","announcement","visibleHours","orgName","serverMail","url","reservationDaysInAdvance","reservationMaxActiveCount","mailTemplates","reservationConfirmation","subject","body","reservationCancelled","confirmMail","resetPassword","templates","reservationPrice","reservationTos","systemTos","infoPage","legalPrivacy","courts","name","disabled","disabledFromTil","add","disabledReason","users","verified","admin","hour","groupId","created","reservationGroups","customName","window","getFakeDb","addFakeReservation","fakeDelay","ms","Promise","resolve","setTimeout","cn","u","method","di","indexOf","slice","handleRequests","options","a","JSON","parse","queryIndex","cleanUrl","params","lastSlashIndex","lastIndexOf","firstUrlPart","lastUrlPart","tryStrings","getBaseDataApi","patchConfigApi","putCourtsApi","getMailTemplatesApi","putMailTemplateApi","putTemplateApi","getUsersApi","patchUserApi","postRegisterApi","postLogoutApi","deleteUserApi","postSendVerifyMailApi","postVerifyMailApi","getReservationsApi","deleteReservationGroupApi","patchReservationGroupApi","postReservationGroupApi","success","id","map","upcomingReservationCount","totalReservationCount","lastActivity","some","__status","json","newUser","Math","floor","random","Number","MAX_SAFE_INTEGER","token","parseInt","find","filter","verifyToken","btoa","warn","atob","start","end","forEach","isBetween","isSameOrAfter","isSameOrBefore","g","gId","uId","undefined","reduce","nextId","max","dates","d","group","acc","groupReservations","rest","found","keepReservations","newReservations","court","c","maxDate","conflicts","isAfter","isBefore","unavailableDates","updatedReservations","userGroupIds","resCount","includes","byteLen","x","str","stringify","m","encodeURIComponent","match","patchFetch","_fetch","fetch","res","console","log","error","request","response","totalKb","ok","status"],"mappings":"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","file":"static/js/21.c4b6d64a.chunk.js","sourcesContent":["export function findReservation(reservations, date, courtId) {\n    if (!reservations)\n        return null;\n\n    for (let r of reservations)\n        if (date.isSame(r.date, 'hour') && courtId === r.courtId)\n            return r;\n    return null;\n}\n\nexport function parseQuery(queryString) {\n    const query = {};\n    const pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n    for (let i = 0; i < pairs.length; i++) {\n        const pair = pairs[i].split('=');\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n    }\n    return query;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { Button, Space, notification } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { authContext } from '../AuthContext';\nimport { postLoginApi } from '../api';\nimport { useApi } from '../useApi';\n\nexport const demoControl = {};\n\nexport function DemoControls() {\n\n    const { user, setUser } = useContext(authContext);\n    const [open, setOpen] = useState(true);\n    const [, login] = useApi(postLoginApi, setUser);\n\n    const history = useHistory();\n    demoControl.history = history;\n    const location = useLocation();\n\n    useEffect(() => {\n        if (!open) {\n            notification.close('demo');\n            return;\n        }\n\n        notification.info({\n            style: { zIndex: 200},\n            key: 'demo',\n            message: 'Demo Modus',\n            duration: 0,\n            placement: 'bottomRight',\n            onClose: () => setOpen(false),\n            description: (\n                <>\n                    <p>Dies ist eine Demo, gefüllt mit Beispieldaten.</p>\n                    <Space direction=\"vertical\">\n                        {location.pathname === '/kiosk' ?\n                            (\n                                <Button size=\"middle\" onClick={() => history.push('/')}>\n                                    Kiosk Modus verlassen\n                                </Button>\n                            ) : (\n                                <>\n                                    <Button size=\"middle\" onClick={() => history.push('/kiosk')}>\n                                        Kiosk Modus\n                                    </Button>\n                                    {user?.userId !== 2 &&\n                                        <Button size=\"middle\" onClick={() => login(null, {\n                                            type: 'plain',\n                                            mail: 'otto@example.com',\n                                            password: 'demo',\n                                        })}>\n                                            Als Admin (Otto) anmelden\n                                        </Button>\n                                    }\n                                    {user?.userId !== 9 &&\n                                        <Button size=\"middle\" onClick={() => login(null, {\n                                            type: 'plain',\n                                            mail: 'max@example.com',\n                                            password: 'demo',\n                                        })}>\n                                            Als Nutzer (Max) anmelden\n                                        </Button>\n                                    }\n                                </>\n                            )\n                        }\n                    </Space>\n                </>\n            ),\n        });\n    }, [open, history, location, user, login]);\n\n    if (!open)\n        return (\n            <Button \n                style={{ position: 'fixed', bottom: 5, right: 5 }}\n                type=\"primary\" \n                onClick={() => setOpen(true)}\n            >\n                Demosteuerung öffnen\n            </Button>\n        );\n\n    return null;\n}","import dayjs from 'dayjs';\n\nconst today = dayjs().startOf('day');\n\nexport const db = {\n\n    config: {\n        announcement: \"Beispielankündigung: abcdefg bla bla\",\n        visibleHours: [8, 22],\n        orgName: 'Tennisclub Beispiel',\n        serverMail: 'abc@def.de',\n        url: 'https://reservierung.xyz.de',\n        reservationDaysInAdvance: 90,\n        reservationMaxActiveCount: 10,\n    },\n\n    mailTemplates: {\n        reservationConfirmation: {\n            subject: 'Reservierungsbestätigung - Tennisclub Beispiel',\n            body: `Hallo {{name}}.<div><br>Sie haben soeben folgende Reservierung getätigt:<br><br>{{reservierung}}<br><br>Eine verbindliche Buchung kommt erst durch Einwurf der Wertmarke in den Wertmarkenautomaten zustande.<br>Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.<br><br>Sie bekommen die Wertmarken und den Zugangscode bei unserern Partnern:<br>xyz<br><br>---</div><div><br></div><div>Tennisclub Beispiel&nbsp;</div>`\n        },\n        reservationCancelled: {\n            subject: 'Stornierung Ihrer Reservierung - Tennisclub Beispiel',\n            body: `Hallo {{name}}.<div><br>Ihre Reservierung wurde soeben storniert:<br><br>{{reservierung}}<br><br>Grund der Stornierung:</div><div><br></div><div>{{grund}}<br><br><br>---</div><div><br></div><div>Tennisclub Beispiel&nbsp;</div>`\n        },\n        confirmMail: {\n            subject: 'Registrierung: Bestätigen Sie Ihre E-Mail - Tennisclub Beispiel',\n            body: `Hallo {{name}}.<div><br>Bitte bestätigen Sie Ihre E-Mail Adresse, indem Sie auf folgenden Link klicken:<br><br>{{link}}<br></div><div><br></div><div>---</div><div><br></div><div>Tennisclub Beispiel&nbsp;</div>`\n        },\n        resetPassword: {\n            subject: 'Passwort zurücksetzen - Tennisclub Beispiel',\n            body: `Hallo {{name}}.<div><br>Klicken Sie auf folgenden Link, um Ihr Passwort zurückzusetzen:<br><br>{{link}}<br><br></div><div>---</div><div><br></div><div>Tennisclub Beispiel&nbsp;</div>`\n        },\n    },\n\n    templates: {\n        reservationPrice: {\n            body: `<div>\n    15,- Euro pro Wertmarke<br />\n    145,- Euro pro 10 Wertmarken\n</div>`\n        },\n        reservationTos: {\n            body: `<ul>\n    <li>\n        Zur Nutzung benötigen Sie Wertmarken und einen Zugangscode. Diese erhalten Sie bei unserern Partnern: <br />\nxyz asfdlkafsd, asdfkj 012387878 <br />\nxbasdfyz aad, asdfkj 129388 8123 <br />\n    </li>\n    <li>\n        Am Eingang der Halle ist ein Codeschloß angebracht, in das ein 4-stelliger Zahlencode eingegeben werden muß, um den Türöffner zu betätigen.\n    </li>\n    <li>\n        Auf den Plätzen befindet sich für jeden Platz ein Wertmarkenautomat. Eine Wertmarke schaltet für 1 Stunde (+ etwas Nachlauf) das Licht ein und gibt die Heizungssteuerung frei.\n    </li>\n    <li>\n        Eine Nutzung nach 22.00 und vor 8.00 Uhr ist ohne Reservierung möglich.\n    </li>\n    <li>\n        Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.\n    </li>\n</ul>`\n        },\n        systemTos: {\n            body: `<ul>\n    <li>\n        Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.\n    </li>\n    <li>\n        Ihr Anzeigename wird öffentlich auf dem Reservierungskalender angezeigt.\n    </li>\n    <li>\n        Sie sind damit einverstanden, dass eine zu Cookies ähnliche Technologie verwendet wird, um die Funktionalität des Systems zu gewährleisten. Es erfolgt kein Tracking, o.ä.\n    </li>\n    <li>\n        Sie können Ihre gespeicherten Daten (Benutzerkonto, Reservierungen) zu jedem Zeitpunkt einsehen und endgültig löschen.\n    </li>\n    <li>\n        Ihre E-Mail wird dazu verwendet, um Reservierungen zu bestätigen und Sie ggf. zu benachrichtigen. Ihre E-Mail wird nicht mit Dritten geteilt.\n    </li>\n</ul>`\n        },\n        infoPage: {\n            body: `<h1>Allgemeine Informationen zur Hallennutzung</h1><div><br><ul><li>Es handelt sich hier um ein Reservierungssystem und nicht um ein Buchungssystem.</li><li>Eine verbindliche Buchung kommt erst durch Einwurf der Wertmarke in den Wertmarkenautomaten zustande.</li><li>Aus dem Reservierungssystem können keine Rechtsansprüche abgeleitet werden.</li><li>Sie müssen dieses Reservierungssystem nicht nutzen. Sie können die Halle auch ohne Reservierung nutzen, bitte beachten Sie aber, daß Reservierungen Vorrang haben.</li><li>Es ist auch eine Nutzung nach 22.00 und vor 8.00 möglich. Diese Zeiten werden nur selten nachgefragt und sind deshalb wegen der Übersichtlichkeit nicht im Reservierungsplan aufgeführt.</li><li>Am Eingang der Halle ist ein Codeschloß angebracht, in das ein 4-stelliger Zahlencode eingegeben werden muß, um den Türöffner zu betätigen.</li><li>Auf den Plätzen befindet sich für jeden Platz ein Wertmarkenautomat. Eine Wertmarke schaltet für 1 Stunde (+ etwas Nachlauf) das Licht ein und gibt die Heizungssteuerung frei.</li><li>Sie bekommen die Wertmarken und den Zugangscode bei unserern Partnern:</li><li>relexa hotel Harz-Wald Braunlage, Karl-Röhrig Str. 5a, Tel. 05520/8070</li><li>BTG Braunlage (Tourist-Information), Elbingeröderstr. 17, Tel. 05520/93070</li><li>Eine Wertmarke kostet 15,- Euro</li><li>10 Wertmarken kosten 145,- Euro</li><li>Ein Abo im eigentlichen Sinn gibt es nicht, nur den Rabatt ab 10 Wertmarken.</li><li>Bei wesentlich höherem Bedarf, z.B. Buchung der ganzen Halle für ein Wochenende setzen Sie sich bitte mit uns in Verbindung.</li></ul></div><div><br></div><h1>Nutzung des Reservierungssystems</h1><div><ul><li>Neu hier?<br>Bevor sie das Reservierungssystem nutzen können, müssen sie sich registrieren.</li><li>Wie reserviere ich eine Stunde?<br>Klicken Sie die gewünschte Stunde einfach an. Falls Sie nicht angemeldet sind erscheint die Anmeldemaske. Melden Sie sich an, dann können Sie die gewünschte Stunde durch einfaches anklicken reservieren.</li><li>Wie storniere ich eine Reservierung?<br>Sie können Reservierungen einfach durch anklicken der Reservierung wieder stornieren. Sie können nur ihre eigenen Reservierungen stornieren. Sie müssen dazu angemeldet sein.</li><li>Welche Einschränkungen gibt es für Reservierungen?<br>Reservierungen können maximal 3 Monate im voraus getätigt werden.</li><li>Passwort, E-Mail oder Nutzername ändern<br>Sie können ihre Daten unter \"Mein Benutzerkonto\" ändern.</li><li>DSGVO: Daten löschen / anfordern<br>Sie können all ihre Daten unter \"Mein Benutzerkonto\" anfordern.</li></ul></div>`,\n        },\n        legalPrivacy: {\n            body: `<h1>Impressum</h1><h1>Datenschutzerklärung</h1>`,\n        },\n    },\n\n    courts: [\n        {\n            courtId: 1,\n            name: 'Platz 1',\n        },\n        {\n            courtId: 2,\n            name: 'Platz 2',\n            disabled: true,\n            disabledFromTil: [\n                today.add(-2, 'week'),\n                today.add(4, 'week'),\n                // today.add(8, 'week'),\n            ],\n            disabledReason: 'beliebiger Grund',\n        },\n        // {\n        //     courtId: 2,\n        //     name: 'Platz 3',\n        // }\n    ],\n\n    users: [\n        {\n            userId: 9,\n            name: 'Max Mustermann',\n            mail: 'max@example.com',\n            verified: true,\n            admin: false,\n        },\n        {\n            userId: 2,\n            name: 'Otto Probiermal',\n            mail: 'otto@example.com',\n            verified: true,\n            admin: true,\n        },\n        {\n            userId: 3,\n            name: 'Jürgen M.',\n            mail: 'juergen@example.com',\n            verified: true,\n            admin: false,\n        },\n        {\n            userId: 8,\n            name: 'H. Müller',\n            mail: 'mueller@example.com',\n            verified: true,\n            admin: false,\n        },\n        {\n            userId: 661,\n            name: 'Nick Sample',\n            mail: 'test.franz.mein.mail@franz.de',\n            verified: true,\n            admin: false,\n        },\n        {\n            userId: 41,\n            name: 'Franz Test',\n            mail: 'test.franz.mein.mail@franz.de',\n            verified: false,\n            admin: false,\n        }\n    ],\n\n    // primary key: courtId x Date\n    // foreign key: groupId\n    reservations: [\n        {\n            date: today.add(-1, 'day').hour(11),\n            courtId: 1,\n            groupId: 1,\n            created: today.add(-2, 'day').hour(11),\n        },\n        {\n            date: today.add(3, 'day').hour(20),\n            courtId: 1,\n            groupId: 3,\n            created: today.add(-2, 'day').hour(11),\n        },\n        {\n            date: today.add(-2, 'day').hour(15),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(-1, 'day').hour(15),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(-0, 'day').hour(15),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(1, 'day').hour(15),\n            courtId: 1,\n            groupId: 2,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(0, 'day').hour(17),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(7, 'day').hour(17),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(14, 'day').hour(17),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n        {\n            date: today.add(21, 'day').hour(17),\n            courtId: 1,\n            groupId: 4,\n            created: today.add(-4, 'day').hour(11),\n        },\n    ],\n\n    // primary key: groupId auto_inc\n    reservationGroups: [\n        {\n            groupId: 1,\n            userId: 9,\n            customName: null,\n        },\n        {\n            groupId: 3,\n            userId: 9,\n            customName: null,\n        },\n        {\n            groupId: 2,\n            userId: 3,\n            customName: null,\n        },\n        {\n            groupId: 4,\n            userId: 2,\n            customName: null,\n        },\n    ]\n};\n\nwindow.getFakeDb = () => {\n    return db;\n};\n\nwindow.addFakeReservation = () => {\n    db.reservationGroups.push({\n        groupId: 999,\n        userId: 2,\n        customName: 'Fake',\n    });\n\n    db.reservations.push({\n        date: today.hour(8),\n        courtId: 1,\n        groupId: 999,\n        created: today,\n    });\n}\n","import { Button, notification } from 'antd';\nimport { deleteReservationGroupApi, deleteUserApi, getBaseDataApi, getMailTemplatesApi, getReservationsApi, getUsersApi, patchConfigApi, patchReservationGroupApi, patchUserApi, postLoginApi, postLogoutApi, postRegisterApi, postReservationGroupApi, postSendVerifyMailApi, postVerifyMailApi, putCourtsApi, putMailTemplateApi, putTemplateApi } from '../api';\n\nimport dayjs from 'dayjs';\nimport { db } from './mockDatabase';\nimport { demoControl } from './DemoControls';\nimport { parseQuery } from '../helper';\n\nconst fakeDelay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst cn = ({ url, method }) => {\n    let u = method || 'GET';\n    const di = url.indexOf(':');\n    return u + (di !== -1 ? url.slice(0, di) : url);\n};\n\nasync function handleRequests(url, options) {\n    const body = options.body ? JSON.parse(options.body) : null;\n\n    const queryIndex = url.indexOf('?');\n    const cleanUrl = queryIndex !== -1 ? url.slice(0, queryIndex) : url;\n    const params = parseQuery(url.slice(queryIndex));\n\n    const lastSlashIndex = cleanUrl.lastIndexOf('/');\n    const firstUrlPart = cleanUrl.slice(0, lastSlashIndex + 1);\n    const lastUrlPart = cleanUrl.slice(lastSlashIndex + 1);\n\n    const tryStrings = [\n        `${options.method}${cleanUrl}`,\n        `${options.method}${firstUrlPart}`,\n    ];\n\n    for (let s of tryStrings) {\n        switch (s) {\n            case cn(getBaseDataApi):\n                return {\n                    config: db.config,\n                    courts: db.courts,\n                    templates: db.templates,\n                };\n\n            case cn(patchConfigApi):\n                db.config = {\n                    ...db.config,\n                    ...body,\n                };\n                return { success: true };\n\n            case cn(putCourtsApi):\n                db.courts = body;\n                return { success: true };\n\n            case cn(getMailTemplatesApi):\n                return db.mailTemplates;\n\n            case cn(putMailTemplateApi):\n                db.mailTemplates = {\n                    ...db.mailTemplates,\n                    [body.id]: body,\n                };\n                return { success: true };\n\n            case cn(putTemplateApi):\n                db.templates = {\n                    ...db.templates,\n                    [body.id]: body,\n                };\n                return { success: true };\n\n            case cn(getUsersApi):\n                return db.users.map(user => ({\n                    ...user,\n                    upcomingReservationCount: 123,\n                    totalReservationCount: 1234,\n                    lastActivity: dayjs(),\n                }));\n\n            case cn(patchUserApi):\n                db.users = db.users.map(u => {\n                    if (u.userId === body.userId)\n                        return {\n                            ...u,\n                            ...body,\n                            verified: (!body.mail || u.mail === body.mail)\n                                ? u.verified : false,\n                        };\n                    return u;\n                });\n                return { success: true };\n\n            case cn(postRegisterApi):\n                if (db.users.some(u => u.mail === body.mail))\n                    return {\n                        __status: 400,\n                        json: { message: 'mail already registered' }\n                    };\n                const newUser = {\n                    name: body.name,\n                    mail: body.mail,\n                    password: 'hashedPw',\n                    userId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),\n                    verified: false,\n                    admin: false,\n                };\n                db.users.push(newUser);\n                return {\n                    token: `demo-token.${newUser.userId}`,\n                    userId: newUser.userId,\n                    name: newUser.name,\n                    mail: newUser.mail,\n                    verified: newUser.verified,\n                    admin: newUser.admin,\n                };\n\n            case cn(postLoginApi): {\n                // await fakeDelay(800);\n                const { type, token, mail, /* password */ } = body;\n                let user;\n                if (type === 'token') {\n                    const userId = parseInt(token.split('.')[1]);\n                    user = db.users.find(u => u.userId === userId);\n                } else {\n                    // ignore password in demo\n                    user = db.users.find(u => u.mail === mail);\n                }\n                if (!user)\n                    return {\n                        __status: 401,\n                        json: { message: 'wrong login' }\n                    };\n                return {\n                    token: `demo-token.${user.userId}`,\n                    userId: user.userId,\n                    name: user.name,\n                    mail: user.mail,\n                    verified: user.verified,\n                    admin: user.admin,\n                };\n            }\n\n            case cn(postLogoutApi):\n                return { success: true };\n\n            case cn(deleteUserApi):\n                db.users = db.users.filter(u => u.userId !== body.userId);\n                return { success: true };\n\n            case cn(postSendVerifyMailApi): {\n                const verifyToken = btoa(body.mail);\n                notification.warn({\n                    key: 'fake-verification',\n                    message: 'Demo E-Mail Verifikation',\n                    duration: 0,\n                    placement: 'bottomRight',\n                    description: (\n                        <div>\n                            <p>Dies simuliert den Verifikationsprozess für <strong>{body.mail}</strong>.</p>\n                            <Button onClick={() => {\n                                demoControl.history?.push(`/verify-mail/${verifyToken}`);\n                                notification.close('fake-verification');\n                            }}>\n                                E-Mail Verifizieren (Demo)\n                        </Button>\n                        </div>\n                    ),\n                });\n                return { success: true };\n            }\n\n            case cn(postVerifyMailApi): {\n                const mail = atob(body.token);\n                const user = db.users.find(u => u.mail === mail);\n                if (!user)\n                    return {\n                        __status: 404,\n                        json: { message: 'user not found' }\n                    };\n                user.verified = true;\n                return { success: true };\n            }\n\n            case cn(getReservationsApi): {\n                const start = params.start && dayjs(params.start);\n                const end = params.end && dayjs(params.end);\n                const groupId = params['group-id'] && parseInt(params['group-id']);\n                const userId = params['user-id'] && parseInt(params['user-id']);\n                const reservations = [];\n\n                const checkDate = (date) => {\n                    if (start && end)\n                        return date.isBetween(start, end, '[]');\n                    else if (start)\n                        return date.isSameOrAfter(start);\n                    else if (end)\n                        return date.isSameOrBefore(end);\n                    return true;\n                };\n\n                const checkGroupId = (gId) => {\n                    if (groupId)\n                        return groupId === gId;\n                    return true;\n                };\n\n                const checkUserId = (uId) => {\n                    if (userId)\n                        return userId === uId;\n                    return true;\n                };\n\n                db.reservations.forEach(r => {\n                    if (checkDate(r.date)) {\n                        db.reservationGroups.forEach(g => {\n                            if (g.groupId === r.groupId && checkGroupId(g.groupId)) {\n                                db.users.forEach(u => {\n                                    if (g.userId === u.userId && checkUserId(u.userId)) {\n                                        reservations.push({\n                                            ...r,\n                                            ...g,\n                                            name: u.name,\n                                            created: undefined,\n                                        });\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n                return reservations;\n            }\n\n            case cn(deleteReservationGroupApi):\n            case cn(patchReservationGroupApi):\n            case cn(postReservationGroupApi): {\n                let groupId;\n                try {\n                    groupId = parseInt(lastUrlPart);\n                } catch (e) { }\n                groupId = groupId || db.reservationGroups.reduce((nextId, g) => {\n                    return Math.max(nextId, g.groupId);\n                }, 0) + 1;\n                const customName = body?.customName;\n                const dates = body?.dates?.map(d => dayjs(d).startOf('hour'));\n\n                if (!dates?.length) {\n                    // same as delete all\n                    db.reservationGroups = db.reservationGroups.filter(g => g.groupId !== groupId);\n                    db.reservations = db.reservations.filter(r => r.groupId !== groupId);\n                } else {\n                    const group = db.reservationGroups.find(g => g.groupId === groupId);\n                    if (customName && group) {\n                        group.customName = customName;\n                    }\n\n                    const { groupReservations, rest } = db.reservations.reduce((acc, r) => {\n                        if (r.groupId === groupId)\n                            acc.groupReservations.push(r);\n                        else\n                            acc.rest.push(r);\n                        return acc;\n                    }, { groupReservations: [], rest: [] });\n                    const courtId = body?.courtId || groupReservations[0].courtId;\n                    if (body?.courtId && groupReservations.length > 0 && groupReservations[0].courtId !== body?.courtId)\n                        return {\n                            __status: 400,\n                            json: { message: 'courtId change not implemented' }\n                        };\n\n                    const { keepReservations, newReservations } = dates.reduce((acc, date) => {\n                        const found = groupReservations.find(r => r.date.isSame(date, 'hour'));\n                        if (found)\n                            acc.keepReservations.push(found);\n                        else\n                            acc.newReservations.push({\n                                date,\n                                courtId,\n                                groupId,\n                                created: dayjs(),\n                            });\n                        return acc;\n                    }, { keepReservations: [], newReservations: [] });\n\n                    const userId = group?.userId || body?.userId;\n                    const user = db.users.find(u => u.userId === userId);\n\n                    const court = db.courts.find(c => c.courtId === courtId);\n                    const today = dayjs();\n                    const maxDate = today.add(db.config.reservationDaysInAdvance, 'day');\n                    const conflicts = newReservations.reduce((conflicts, { date }) => {\n                        if (\n                            (!user.admin && date.isAfter(maxDate, 'day'))\n                            || (!user.admin && date.isBefore(today, 'day'))\n                            || db.reservations.some(r => r.date.isSame(date, 'hour'))\n                            || (court.disabledFromTil && date.isBetween(court.disabledFromTil[0], court.disabledFromTil[1], 'day', '[]'))\n                        ) {\n                            conflicts.push(date);\n                        }\n                        return conflicts;\n                    }, []);\n\n                    if (conflicts.length > 0)\n                        return {\n                            __status: 409,\n                            json: { unavailableDates: conflicts }\n                        };\n\n                    const updatedReservations = [\n                        ...rest,\n                        ...keepReservations,\n                        ...newReservations,\n                    ];\n\n                    if (!user.admin) {\n                        const userGroupIds = [\n                            groupId,\n                            ...db.reservationGroups\n                                .filter(g => g.userId === userId)\n                                .map(g => g.groupId)\n                        ];\n                        const resCount = updatedReservations.reduce((acc, r) => {\n                            if (userGroupIds.includes(r.groupId) && r.date.isSameOrAfter(today, 'day'))\n                                return acc + 1;\n                            return acc;\n                        }, 0);\n\n                        if (resCount > db.config.reservationMaxActiveCount)\n                            return {\n                                __status: 403,\n                                json: {\n                                    message: 'too many active reservations',\n                                    value: resCount,\n                                    max: db.config.reservationMaxActiveCount,\n                                }\n                            };\n                    }\n\n                    db.reservations = updatedReservations;\n\n                    // new reservation ~ post\n                    if (!groupReservations.length) {\n                        const group = {\n                            groupId,\n                            userId,\n                            customName,\n                        };\n                        db.reservationGroups.push(group);\n\n                        return newReservations.map(r => ({\n                            ...r,\n                            ...group,\n                            name: user.name,\n                            created: undefined,\n                        }));\n                    }\n                }\n\n                return { success: true };\n            }\n\n            default:\n        }\n    }\n\n    return null;\n}\n\nfunction byteLen(x) {\n    const str = typeof x === 'string' ? x : JSON.stringify(x);\n    const m = encodeURIComponent(str).match(/%[89ABab]/g);\n    return str.length + (m ? m.length : 0);\n}\n\nexport function patchFetch() {\n    const _fetch = window.fetch;\n\n    window.fetch = async (url, options) => {\n\n        await fakeDelay(200);\n\n        let res;\n        try {\n            res = await handleRequests(url, options || {});\n        } catch (err) {\n            console.log(err);\n            res = {\n                __status: 500,\n                json: { error: true },\n            };\n        }\n\n        console.log(\"Fake API:\", {\n            request: { url, options },\n            response: res,\n            db,\n            totalKb: byteLen({ res, }) / 1024,\n        });\n\n        if (res?.__status) {\n            return Promise.resolve({\n                ok: false,\n                status: res.__status,\n                json: async () => Promise.resolve(JSON.parse(JSON.stringify(res.json))),\n            });\n        } else if (res) {\n            return Promise.resolve({\n                ok: true,\n                json: async () => Promise.resolve(JSON.parse(JSON.stringify(res))),\n            });\n        }\n\n        return _fetch(url, options);\n    };\n}"],"sourceRoot":""}